Create a Deque, Qi of capacity K, that stores only useful elements of current 
window of K elements. An element is useful if it is in current window and
is greater than all other elements on right side of it in current window.
Process all array elements one by one and maintain Qi to contain useful 
elements of current window and these useful elements are maintained in 
sorted order. The element at front of the Qi is the largest and
element at rear/back of Qi is the smallest of current window.

Create a deque to store K elements.
Run a loop and insert the first K elements in the deque. 
Before inserting the element, check if the element at the 
back of the queue is smaller than the current element, 
if it is so remove the element from the back of the deque 
until all elements left in the deque are greater than the
current element. Then insert the current element, 
at the back of the deque.
Now, run a loop from K to the end of the array.
  Print the front element of the deque.
  Remove the element from the front of the queue 
  if they are out of the current window.
  Insert the next element in the deque. Before inserting 
  the element, check if the element at the back of the queue is 
  smaller than the current element, if it is so remove the element 
  from the back of the deque until all elements left in the deque 
  are greater than the current element. Then insert the current element, at the back of the deque.
  Print the maximum element of the last window.
# Python3 program to find the maximum for
# each and every contiguous subarray of
# size K

from collections import deque

# A Deque (Double ended queue) based
# method for printing maximum element
# of all subarrays of size K


def printMax(arr, N, K):
	""" Create a Double Ended Queue, Qi that 
	will store indexes of array elements. 
	The queue will store indexes of useful 
	elements in every window and it will
	maintain decreasing order of values from
	front to rear in Qi, i.e., arr[Qi.front[]]
	to arr[Qi.rear()] are sorted in decreasing
	order"""
	Qi = deque()

	# Process first k (or first window)
	# elements of array
	for i in range(K):

		# For every element, the previous
		# smaller elements are useless
		# so remove them from Qi
		while Qi and arr[i] >= arr[Qi[-1]]:
			Qi.pop()

		# Add new element at rear of queue
		Qi.append(i)

	# Process rest of the elements, i.e.
	# from arr[k] to arr[n-1]
	for i in range(K, N):

		# The element at the front of the
		# queue is the largest element of
		# previous window, so print it
		print(str(arr[Qi[0]]) + " ", end="")

		# Remove the elements which are
		# out of this window
		while Qi and Qi[0] <= i-K:

			# remove from front of deque
			Qi.popleft()

		# Remove all elements smaller than
		# the currently being added element
		# (Remove useless elements)
		while Qi and arr[i] >= arr[Qi[-1]]:
			Qi.pop()

		# Add current element at the rear of Qi
		Qi.append(i)

	# Print the maximum element of last window
	print(str(arr[Qi[0]]))


# Driver's code
if __name__ == "__main__":
	arr = [12, 1, 78, 90, 57, 89, 56]
	K = 3
	
	# Function call
	printMax(arr, len(arr), K)

# This code is contributed by Shiv Shankar
Time Complexity: O(N). It seems more than O(N) at first look. 
It can be observed that every element of the array is added and 
removed at most once. So there are a total of 2n operations.
Auxiliary Space: O(K). Elements stored in the dequeue take O(K) space.
